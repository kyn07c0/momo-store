variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

include:
  - template: Security/SAST.gitlab-ci.yml
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'  

stages:
  - build
  - test
  - container-release
  - notify
  - helm-release
  - deploy

build:
  stage: build
  image: docker:20.10.12-dind-rootless
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - cd frontend
    - >
      docker build
      --build-arg VERSION=$VERSION
      --tag $CI_REGISTRY_IMAGE/momo-frontend:$CI_COMMIT_SHA
      .
    - docker push $CI_REGISTRY_IMAGE/momo-frontend:$CI_COMMIT_SHA

sonarqube-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  needs:
    - build
  script:
    - cd frontend
    - >
      sonar-scanner
      -Dsonar.projectKey=${SONAR_PROJECT_KEY_FRONT}
      -Dsonar.host.url=${SONARQUBE_URL}
      -Dsonar.login=${SONAR_LOGIN_FRONT} 
      -Dsonar.qualitygate.wait=true
      -Dsonar.projectName=17_YURIKRYVINYA_MOMO_FRONT

spotbugs-sast:
  stage: test
  variables:
    COMPILE: "false"
    SAST_JAVA_VERSION: 11
    MAVEN_REPO_PATH: ${CI_PROJECT_DIR}/.m2/repository         

release-frontend-container:
  variables:
    GIT_STRATEGY: none
  image: docker:20.10.12-dind-rootless
  stage: container-release
  needs:
    - build
    - sonarqube-sast
  before_script:
    - until docker info; do sleep 1; done
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/momo-frontend:$CI_COMMIT_SHA
    - docker tag $CI_REGISTRY_IMAGE/momo-frontend:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/momo-frontend:latest
    - docker push $CI_REGISTRY_IMAGE/momo-frontend:latest

release-helm-chart:
  stage: helm-release
  image: alpine/helm:latest
  script:
    - cd helm
    - sed -i "s/{{TAG}}/$CI_COMMIT_SHA/" frontend-chart/values.yaml
    - sed -i "s/{{VERSION}}/$VERSION/" frontend-chart/Chart.yaml
    - helm package frontend-chart --version ${VERSION}
    - curl -u ${NEXUS_HELM_USER}:${NEXUS_HELM_PASS} ${NEXUS_HELM_REPO_FRONTEND} --upload-file frontend-${VERSION}.tgz

install-helm-chart:
  variables:
    GIT_STRATEGY: none
  stage: deploy
  image: alpine/helm:latest
  script:
    - mkdir ~/.kube
    - echo "${KUBE_CONFIG}" > ~/.kube/config
    - helm repo add nexus ${NEXUS_HELM_REPO_FRONTEND} --username ${NEXUS_HELM_USER} --password ${NEXUS_HELM_PASS}
    - helm repo update
    - helm upgrade frontend nexus/frontend -i --namespace default 

#deploy:
#  stage: deploy
#  image:
#    name: bitnami/kubectl:latest
#    entrypoint: ['']
#  script:
#    - kubectl config set-cluster ${KUBE_CLUSTER} --server="${KUBE_SERVER}" --insecure-skip-tls-verify=true
#    - kubectl config set-credentials ${KUBE_USER} --token="${KUBE_TOKEN}"
#    - kubectl config set-context ${KUBE_USER}@${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=${KUBE_USER}
#    - kubectl config use-context ${KUBE_USER}@${KUBE_CLUSTER}
#    - kubectl apply -f kubernetes/frontend
